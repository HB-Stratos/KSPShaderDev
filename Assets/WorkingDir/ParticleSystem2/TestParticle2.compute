#pragma enable_d3d11_debug_symbols

#pragma kernel _Init
#pragma kernel _CpuEmit
#pragma kernel _EarlyUpdate
#pragma kernel _Update



#include "../ComputeShaderLearning/WhiteNoise.cginc"

//Only some specific values can be gathered this way, check documentation (that doesn't exist rn)
uniform float _DeltaTime < string CpuSource = "Time.deltaTime" ; > ; //Really we should not use Time.DeltaTime if this is e.g. updated in fixed update
uniform int rendertype < string RenderType = "Triangles"; > ;
uniform float3 _TransformLocation < string CpuSouce = "transform.position" ; > ;

//TODO all of these need to be added to the shader parser and handled.
#define PARTICLE_USE_PARENTING
//#define PARTICLE_RUN_EMIT_PER_FRAME
#define PARTICLE_RUN_EMIT_ONCE

struct Particle
{
    float3 position; //must be first entry by convention
    int index; //index of particle in the data buffer, used for parenting
    int parent;
};

#define PARTICLE_MIDINCLUDE
#include "ParticleInclude.hlsl"

// struct PersistentGlobalData
// {
//     float timeSinceLastSpawn;
// };

struct Render
{
    float3 pos0;
    float3 pos1;
    float3 pos2;
};
//Note the trailing semicolon. Important!

//TODO figure out a way to request data from the CPU dynamically

// How a new particle should look. Return a Particle.
void DoEmit(inout Particle p)
{
    p.position = float3(0, 0, 0);
    p.parent = -1;
    // Particle child = p;
    // child.parent = p.index;
    // child.position += float3(0, 0, 1);
    // _Emit(child);

}


void AddRender(Render tri)
{

}

// Particle GetParent()
// {

// }

// Update is only allowed to modify data within Particle p.
bool DoUpdate(inout Particle p)
{
    // Render tri;
    // tri.pos0 = float3(0, 0, 0);
    // tri.pos1 = float3(0, 1, 0);
    // tri.pos2 = float3(0, 0, 1);
    // AddRender(tri);

    // Particle parent;
    // if (GetParent(p, parent))
    // {
    //     float3 vecToParent = p.position - parent.position;
    //     // if (!all(vecToParent))
    //     // {
    //     //     //if the distance is zero
    //     //     p.position += float3(0, 0, 0.1);
    //     // }
    //     // else
    //     // {
    //     p.position += normalize(vecToParent) * ((dot(vecToParent, vecToParent) - 1) * 0.1 * _DeltaTime);
    //     // }

    // }
    // else
    // {
    p.position = _TransformLocation;
    // }

    return true; //return false to kill particle

}

#define PARTICLE_POSTINCLUDE
#include "ParticleInclude.hlsl"






